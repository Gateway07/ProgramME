(declare-fun ys () String)
(declare-fun result () Int)
(declare-fun fi () Int)
(declare-fun li () Int)
(declare-fun x () String)
(define-funs-rec ( ( filter ((x!1 String) (x!2 String)) String))
                 ( (let ((a!1 (>= (str.indexof x!2 (seq.unit (seq.nth x!1 0)) 0)
                                  0))
                         (a!2 ((_ filter 0)
                                (str.substr x!1 1 (- (str.len x!1) 1))
                                x!2)))
                   (let ((a!3 (ite a!1
                                   (str.++ (seq.unit (seq.nth x!1 0)) a!2)
                                   a!2)))
                     (ite (= (str.len x!1) 0) "" a!3)))))
(assert (let ((a!1 (ite (or (< fi 0) (< li 0) (> fi li))
                ""
                ((_ filter 0) (str.substr x (+ fi 1) (- li fi)) "|:")))
      (a!2 (distinct (seq.nth ys (- (str.len ys) 1)) (_ Char 58)))
      (a!3 ((_ filter 0) (str.substr ys 1 (- (str.len ys) 1)) "|")))
(let ((a!4 (ite (or (= (str.len ys) 0)
                    (distinct (seq.nth ys 0) (_ Char 58))
                    a!2)
                (- 1)
                (+ (str.len a!3) 4))))
  (and (= fi (str.indexof x "[" 0))
       (= li (seq.last_indexof x "]"))
       (= ys a!1)
       (= result a!4)))))