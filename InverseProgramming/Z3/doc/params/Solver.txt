abce (bool) eliminate blocked clauses using asymmetric literals (default: false)
acce (bool) eliminate covered clauses using asymmetric added literals (default: false)
algebraic_number_evaluator (bool) simplify/evaluate expressions containing (algebraic) irrational numbers. (default: true)
anf (bool) enable ANF based simplification in-processing (default: false)
anf.delay (unsigned int) delay ANF simplification by in-processing round (default: 2)
anf.exlin (bool) enable extended linear simplification (default: false)
arith_ineq_lhs (bool) rewrite inequalities so that right-hand-side is a constant. (default: false)
arith_lhs (bool) all monomials are moved to the left-hand-side, and the right-hand-side is just a constant. (default: false)
asymm_branch (bool) asymmetric branching (default: true)
asymm_branch.all (bool) asymmetric branching on all literals per clause (default: false)
asymm_branch.delay (unsigned int) number of simplification rounds to wait until invoking asymmetric branch simplification (default: 1)
asymm_branch.limit (unsigned int) approx. maximum number of literals visited during asymmetric branching (default: 100000000)
asymm_branch.rounds (unsigned int) maximal number of rounds to run asymmetric branch simplifications if progress is made (default: 2)
asymm_branch.sampled (bool) use sampling based asymmetric branching based on binary implication graph (default: true)
ate (bool) asymmetric tautology elimination (default: true)
axioms2files (bool) print negated theory axioms to separate files during search (default: false)
backtrack.conflicts (unsigned int) number of conflicts before enabling chronological backtracking (default: 4000)
backtrack.scopes (unsigned int) number of scopes to enable chronological backtracking (default: 100)
bca (bool) blocked clause addition - add blocked binary clauses (default: false)
bce (bool) eliminate blocked clauses (default: false)
bce_at (unsigned int) eliminate blocked clauses only once at the given simplification round (default: 2)
bce_delay (unsigned int) delay eliminate blocked clauses until simplification round (default: 2)
binspr (bool) enable SPR inferences of binary propagation redundant clauses. This inprocessing step eliminates models (default: false)
bit2bool (bool) try to convert bit-vector terms of size 1 into Boolean terms (default: true)
blast_add (bool) bit-blast adders. (default: true)
blast_distinct (bool) expand a distinct predicate into a quadratic number of disequalities (default: false)
blast_distinct_threshold (unsigned int) when blast_distinct is true, only distinct expressions with less than this number of arguments are blasted (default: 4294967295)
blast_eq_value (bool) blast (some) Bit-vector equalities into bits (default: false)
blast_full (bool) bit-blast any term with bit-vector sort, this option will make E-matching ineffective in any pattern containing bit-vector terms. (default: false)
blast_mul (bool) bit-blast multipliers (and dividers, remainders). (default: true)
blast_quant (bool) bit-blast quantified variables. (default: false)
blast_select_store (bool) eagerly replace all (select (store ..) ..) term by an if-then-else term (default: false)
blocked_clause_limit (unsigned int) maximum number of literals visited during blocked clause elimination (default: 100000000)
branching.anti_exploration (bool) apply anti-exploration heuristic for branch selection (default: false)
branching.heuristic (symbol) branching heuristic vsids, chb (default: vsids)
burst_search (unsigned int) number of conflicts before first global simplification (default: 100)
bv_extract_prop (bool) attempt to partially propagate extraction inwards (default: false)
bv_ineq_consistency_test_max (unsigned int) max size of conjunctions on which to perform consistency test based on inequalities on bitvectors. (default: 0)
bv_ite2id (bool) rewrite ite that can be simplified to identity (default: false)
bv_le2extract (bool) disassemble bvule to extract (default: true)
bv_le_extra (bool) additional bu_(u/s)le simplifications (default: false)
bv_not_simpl (bool) apply simplifications for bvnot (default: false)
bv_sort_ac (bool) sort the arguments of all AC operators (default: false)
cache_all (bool) cache all intermediate results. (default: false)
cancel_backup_file (symbol) file to save partial search state if search is canceled (default: )
cardinality.encoding (symbol) encoding used for cardinality constraints: grouped, bimander, ordered, unate, circuit (default: none)
cardinality.solver (bool) use cardinality solver (default: true)
cce (bool) eliminate covered clauses (default: false)
compact (bool) try to compact function graph (i.e., function interpretations that are lookup tables) (default: true)
completion (bool) enable/disable model completion (default: false)
core.minimize (bool) minimize computed core (default: false)
core.minimize_partial (bool) apply partial (cheap) core minimization (default: false)
ctrl_c (bool) enable interrupts from ctrl-c (default: true)
cut (bool) enable AIG based simplification in-processing (default: false)
cut.aig (bool) extract aigs (and ites) from cluases for cut simplification (default: false)
cut.delay (unsigned int) delay cut simplification by in-processing round (default: 2)
cut.dont_cares (bool) integrate dont cares with cuts (default: true)
cut.force (bool) force redoing cut-enumeration until a fixed-point (default: false)
cut.lut (bool) extract luts from clauses for cut simplification (default: false)
cut.npn3 (bool) extract 3 input functions from clauses for cut simplification (default: false)
cut.redundancies (bool) integrate redundancy checking of cuts (default: true)
cut.xor (bool) extract xors from clauses for cut simplification (default: false)
ddfw.init_clause_weight (unsigned int) initial clause weight for DDFW local search (default: 8)
ddfw.reinit_base (unsigned int) increment basis for geometric backoff scheme of re-initialization of weights (default: 10000)
ddfw.restart_base (unsigned int) number of flips used a starting point for hessitant restart backoff (default: 100000)
ddfw.threads (unsigned int) number of ddfw threads to run in parallel with sat solver (default: 0)
ddfw.use_reward_pct (unsigned int) percentage to pick highest reward variable when it has reward 0 (default: 15)
ddfw_search (bool) use ddfw local search instead of CDCL (default: false)
dimacs.core (bool) extract core from DIMACS benchmarks (default: false)
drat.activity (bool) dump variable activities (default: false)
drat.binary (bool) use Binary DRAT output format (default: false)
drat.check_sat (bool) build up internal trace, check satisfying model (default: false)
drat.check_unsat (bool) build up internal proof and check (default: false)
drat.disable (bool) override anything that enables DRAT (default: false)
drat.file (symbol) file to dump DRAT proofs (default: )
dyn_sub_res (bool) dynamic subsumption resolution for minimizing learned clauses (default: true)
elim_ite (bool) eliminate ite in favor of and/or (default: true)
elim_rem (bool) replace (rem x y) with (ite (>= y 0) (mod x y) (- (mod x y))). (default: false)
elim_sign_ext (bool) expand sign-ext operator using concat and extract (default: true)
elim_to_real (bool) eliminate to_real from arithmetic predicates that contain only integers. (default: false)
elim_vars (bool) enable variable elimination using resolution during simplification (default: true)
elim_vars_bdd (bool) enable variable elimination using BDD recompilation during simplification (default: true)
elim_vars_bdd_delay (unsigned int) delay elimination of variables using BDDs until after simplification round (default: 3)
enable_pre_simplify (bool) enable pre simplifications before the bounded search (default: false)
eq2ineq (bool) expand equalities into two inequalities (default: false)
euf (bool) enable euf solver (this feature is preliminary and not ready for general consumption) (default: false)
expand_nested_stores (bool) replace nested stores by a lambda expression (default: false)
expand_power (bool) expand (^ t k) into (* t ... t) if  1 < k <= max_degree. (default: false)
expand_select_ite (bool) expand select over ite expressions (default: false)
expand_select_store (bool) conservatively replace a (select (store ...) ...) term by an if-then-else term (default: false)
expand_store_eq (bool) reduce (store ...) = (store ...) with a common base into selects (default: false)
expand_tan (bool) replace (tan x) with (/ (sin x) (cos x)). (default: false)
flat_and_or (bool) create nary applications for and,or (default: true)
force_cleanup (bool) force cleanup to remove tautologies and simplify clauses (default: false)
gc (symbol) garbage collection strategy: psm, glue, glue_psm, dyn_psm (default: glue_psm)
gc.burst (bool) perform eager garbage collection during initialization (default: false)
gc.defrag (bool) defragment clauses when garbage collecting (default: true)
gc.increment (unsigned int) increment to the garbage collection threshold (default: 500)
gc.initial (unsigned int) learned clauses garbage collection frequency (default: 20000)
gc.k (unsigned int) learned clauses that are inactive for k gc rounds are permanently deleted (only used in dyn_psm) (default: 7)
gc.small_lbd (unsigned int) learned clauses with small LBD are never deleted (only used in dyn_psm) (default: 3)
gcd_rounding (bool) use gcd rounding on integer arithmetic atoms. (default: false)
hi_div0 (bool) use the 'hardware interpretation' for division by zero (for bit-vector terms) (default: true)
hoist_ite (bool) hoist shared summands under ite expressions (default: false)
hoist_mul (bool) hoist multiplication over summation to minimize number of multiplications (default: false)
ignore_patterns_on_ground_qbody (bool) ignores patterns on quantifiers that don't mention their bound variables. (default: true)
inline_def (bool) inline local function definitions ignoring possible expansion (default: false)
inprocess.max (unsigned int) maximal number of inprocessing passes (default: 4294967295)
inprocess.out (symbol) file to dump result of the first inprocessing step and exit (default: )
instantiations2console (bool) print quantifier instantiations to the console (default: false)
ite_extra (bool) (default: true) add redundant clauses (that improve unit propagation) when encoding if-then-else formulas
ite_extra_rules (bool) extra ite simplifications, these additional simplifications may reduce size locally but increase globally (default: true)
keep_cardinality_constraints (bool) retain cardinality constraints (don't bit-blast them) and use built-in cardinality solver (default: false)
learned (bool) (default: false) collect also learned clauses.
lemmas2console (bool) print lemmas during search (default: false)
lia2pb_max_bits (unsigned int) (default: 32) maximum number of bits to be used (per variable) in lia2pb.
lia2pb_partial (bool) (default: false) partial lia2pb conversion.
lia2pb_total_bits (unsigned int) (default: 2048) total number of bits to be used (per problem) in lia2pb.
local_ctx (bool) perform local (i.e., cheap) context simplifications (default: false)
local_ctx_limit (unsigned int) limit for applying local context simplifier (default: 4294967295)
local_search (bool) use local search instead of CDCL (default: false)
local_search_dbg_flips (bool) write debug information for number of flips (default: false)
local_search_mode (symbol) local search algorithm, either default wsat or qsat (default: wsat)
local_search_threads (unsigned int) number of local search threads to find satisfiable solution (default: 0)
lookahead.cube.cutoff (symbol) cutoff type used to create lookahead cubes: depth, freevars, psat, adaptive_freevars, adaptive_psat (default: depth)
lookahead.cube.depth (unsigned int) cut-off depth to create cubes. Used when lookahead.cube.cutoff is depth. (default: 1)
lookahead.cube.fraction (double) adaptive fraction to create lookahead cubes. Used when lookahead.cube.cutoff is adaptive_freevars or adaptive_psat (default: 0.4)
lookahead.cube.freevars (double) cube free variable fraction. Used when lookahead.cube.cutoff is freevars (default: 0.8)
lookahead.cube.psat.clause_base (double) clause base for PSAT cutoff (default: 2)
lookahead.cube.psat.trigger (double) trigger value to create lookahead cubes for PSAT cutoff. Used when lookahead.cube.cutoff is psat (default: 5)
lookahead.cube.psat.var_exp (double) free variable exponent for PSAT cutoff (default: 1)
lookahead.delta_fraction (double) number between 0 and 1, the smaller the more literals are selected for double lookahead (default: 1.0)
lookahead.double (bool) enable doubld lookahead (default: true)
lookahead.global_autarky (bool) prefer to branch on variables that occur in clauses that are reduced (default: false)
lookahead.preselect (bool) use pre-selection of subset of variables for branching (default: false)
lookahead.reward (symbol) select lookahead heuristic: ternary, heule_schur (Heule Schur), heuleu (Heule Unit), unit, or march_cu (default: march_cu)
lookahead.use_learned (bool) use learned clauses when selecting lookahead literal (default: false)
lookahead_scores (bool) extract lookahead scores. A utility that can only be used from the DIMACS front-end (default: false)
lookahead_simplify (bool) use lookahead solver during simplification (default: false)
lookahead_simplify.bca (bool) add learned binary clauses as part of lookahead simplification (default: true)
max_conflicts (unsigned int) maximum number of conflicts (default: 4294967295)
max_degree (unsigned int) max degree of algebraic numbers (and power operators) processed by simplifier. (default: 64)
max_memory (unsigned int) (default: infty) maximum amount of memory in megabytes. (default: 4294967295)
max_steps (unsigned int) maximum number of steps (default: 4294967295)
minimize_lemmas (bool) minimize learned clauses (default: true)
model (bool) model generation for solvers, this parameter can be overwritten when creating a solver (default: true)
mul2concat (bool) replace multiplication by a power of two into a concatenation (default: false)
mul_to_power (bool) collpase (* t ... t) into (^ t k), it is ignored if expand_power is true. (default: false)
norm_int_only (bool) normalize only the bounds of integer constants. (default: true)
override_incremental (bool) override incremental safety gaps. Enable elimination of blocked clauses and variables even if solver is reused (default: false)
partial (bool) enable/disable partial function interpretations (default: false)
pb.lemma_format (symbol) generate either cardinality or pb lemmas (default: cardinality)
pb.min_arity (unsigned int) minimal arity to compile pb/cardinality constraints to CNF (default: 9)
pb.resolve (symbol) resolution strategy for boolean algebra solver: cardinality, rounding (default: cardinality)
pb.solver (symbol) encoding used for Pseudo-Boolean constraints: totalizer, sorting, binary_merge, bv, solver. PB constraints are retained if set to 'solver' (default: solver)
pb2bv_all_clauses_limit (unsigned int) (default: 8) maximum number of literals for using equivalent CNF encoding of PB constraint.
pb2bv_cardinality_limit (unsigned int) (default: inf) limit for using arc-consistent cardinality constraint encoding.
phase (symbol) phase selection strategy: always_false, always_true, basic_caching, random, caching, local_search (default: caching)
phase.sticky (bool) use sticky phase caching (default: true)
prob_search (bool) use probsat local search instead of CDCL (default: false)
probing (bool) apply failed literal detection during simplification (default: true)
probing_binary (bool) probe binary clauses (default: true)
probing_cache (bool) add binary literals as lemmas (default: true)
probing_cache_limit (unsigned int) cache binaries unless overall memory usage exceeds cache limit (default: 1024)
probing_limit (unsigned int) limit to the number of probe calls (default: 5000000)
produce_models (bool) model generation. (default: false)
proof (bool) proof generation, it must be enabled when the Z3 context is created (default: false)
proof.check (bool) check proof logs (default: true)
proof.check_rup (bool) check proof RUP inference in proof logs (default: true)
proof.log (symbol) log clause proof trail into a file (default: )
proof.save (bool) save proof log into a proof object that can be extracted using (get-proof) (default: false)
proof.trim (bool) trim and save proof into a proof object that an be extracted using (get-proof) (default: false)
propagate.prefetch (bool) prefetch watch lists for assigned literals (default: true)
pull_cheap_ite (bool) pull if-then-else terms when cheap. (default: false)
push_ite_arith (bool) push if-then-else over arithmetic terms. (default: false)
push_ite_bv (bool) push if-then-else over bit-vector terms. (default: false)
push_to_real (bool) distribute to_real over * and +. (default: true)
random_freq (double) frequency of random case splits (default: 0.01)
random_seed (unsigned int) random seed (default: 0)
reorder.activity_scale (unsigned int) scaling factor for activity update (default: 100)
reorder.base (unsigned int) number of conflicts per random reorder  (default: 4294967295)
reorder.itau (double) inverse temperature for softmax (default: 4.0)
rephase.base (unsigned int) number of conflicts per rephase  (default: 1000)
resolution.cls_cutoff1 (unsigned int) limit1 - total number of problems clauses for the second cutoff of Boolean variable elimination (default: 100000000)
resolution.cls_cutoff2 (unsigned int) limit2 - total number of problems clauses for the second cutoff of Boolean variable elimination (default: 700000000)
resolution.limit (unsigned int) approx. maximum number of literals visited during variable elimination (default: 500000000)
resolution.lit_cutoff_range1 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing less than res_cls_cutoff1 clauses (default: 700)
resolution.lit_cutoff_range2 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing more than res_cls_cutoff1 and less than res_cls_cutoff2 (default: 400)
resolution.lit_cutoff_range3 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing more than res_cls_cutoff2 (default: 300)
resolution.occ_cutoff (unsigned int) first cutoff (on number of positive/negative occurrences) for Boolean variable elimination (default: 10)
resolution.occ_cutoff_range1 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing less than res_cls_cutoff1 clauses (default: 8)
resolution.occ_cutoff_range2 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing more than res_cls_cutoff1 and less than res_cls_cutoff2 (default: 5)
resolution.occ_cutoff_range3 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing more than res_cls_cutoff2 (default: 3)
restart (symbol) restart strategy: static, luby, ema or geometric (default: ema)
restart.emafastglue (double) ema alpha factor for fast moving average (default: 0.03)
restart.emaslowglue (double) ema alpha factor for slow moving average (default: 1e-05)
restart.factor (double) restart increment factor for geometric strategy (default: 1.5)
restart.fast (bool) use fast restart approach only removing less active literals. (default: true)
restart.initial (unsigned int) initial restart (number of conflicts) (default: 2)
restart.margin (double) margin between fast and slow restart factors. For ema (default: 1.1)
restart.max (unsigned int) maximal number of restarts. (default: 4294967295)
retain_blocked_clauses (bool) retain blocked clauses as lemmas (default: true)
rewrite_patterns (bool) rewrite patterns. (default: false)
rlimit (unsigned int) default resource limit used for solvers. Unrestricted when set to 0. (default: 0)
scc (bool) eliminate Boolean variables by computing strongly connected components (default: true)
scc.tr (bool) apply transitive reduction, eliminate redundant binary clauses (default: true)
search.sat.conflicts (unsigned int) period for solving for sat (in number of conflicts) (default: 400)
search.unsat.conflicts (unsigned int) period for solving for unsat (in number of conflicts) (default: 400)
simplify.delay (unsigned int) set initial delay of simplification by a conflict count (default: 0)
smt (bool) use the SAT solver based incremental SMT core (default: false)
smt.proof.check (bool) check proofs on the fly during SMT search (default: false)
smtlib2_log (symbol) file to save solver interaction (default: )
som (bool) put polynomials in sum-of-monomials form (default: false)
som_blowup (unsigned int) maximum increase of monomials generated when putting a polynomial in sum-of-monomials normal form (default: 10)
sort_store (bool) sort nested stores when the indices are known to be different (default: false)
sort_sums (bool) sort the arguments of + application. (default: false)
split_concat_eq (bool) split equalities of the form (= (concat t1 t2) t3) (default: false)
subsumption (bool) eliminate subsumed clauses (default: true)
subsumption.limit (unsigned int) approx. maximum number of literals visited during subsumption (and subsumption resolution) (default: 100000000)
threads (unsigned int) number of parallel threads to use (default: 1)
timeout (unsigned int) timeout on the solver object; overwrites a global timeout (default: 4294967295)
unsat_core (bool) unsat-core generation for solvers, this parameter can be overwritten when creating a solver, not every solver in Z3 supports unsat core generation (default: false)
user_functions (bool) include user defined functions in model (default: true)
v1 (bool) use Z3 version 1.x pretty printer (default: false)
v2 (bool) use Z3 version 2.x (x <= 16) pretty printer (default: false)
variable_decay (unsigned int) multiplier (divided by 100) for the VSIDS activity increment (default: 110)