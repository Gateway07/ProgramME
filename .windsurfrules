# Technology Stack
- **Python Version**: Python 3.12+
- **UI framework**: FastAPI, TypeScript, React, React Query
- **Type Hinting**: Strictly use the `typing` module. All functions, methods, and class members must have type annotations.
- **Testing Framework**: `pytest`
- **Documentation**: Markdown format
- **Environment Management**: `venv`
- **Asynchronous Programming**: Prefer `async` and `await`
- **LLM Framework**: `Open AI API`
- **Data Processing**: `pandas`, `numpy`
- **Version Control**: `git`

## ML/AI Specific Guidelines
- **Data Pipeline Management:** Employ scripts to manage data preprocessing and ensure reproducibility.
- **Experiment Logging:** Maintain comprehensive logs of experiments, including parameters, results, and environmental details.
- **LLM Prompt Engineering:** Dedicate a module or files for managing Prompt templates with version control.
- **Context Handling:** Implement efficient context management for conversations, using suitable data structures like deques.

## Performance Optimization
- **Asynchronous Programming:** Leverage `async` and `await` for I/O-bound operations to maximize concurrency.
- **Caching:** Apply `functools.lru_cache`, `@cache` (Python 3.9+) caching where appropriate.
- **Resource Monitoring:** Use `psutil` or similar to monitor resource usage and identify bottlenecks.
- **Memory Efficiency:** Ensure proper release of unused resources to prevent memory leaks.
- **Concurrency:** Employ `concurrent.futures` or `asyncio` to manage concurrent tasks effectively.
- **Database Best Practices:** Design database schemas efficiently, optimize queries, and use indexes wisely.

## Code Example Requirements
- All functions must include type annotations.
- Must provide clear, Google-style docstrings.
- Key logic should be annotated with comments.
- Provide usage examples (e.g., in the `tests/` directory or as a `__main__` section).
- Include error handling.
- Use `ruff` for code formatting.